// Code generated by protoc-gen-go. DO NOT EDIT.
// source: micro_benchmark.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BenchmarkMessage struct {
	Field1               string   `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field9               string   `protobuf:"bytes,9,opt,name=field9,proto3" json:"field9,omitempty"`
	Field18              string   `protobuf:"bytes,18,opt,name=field18,proto3" json:"field18,omitempty"`
	Field80              bool     `protobuf:"varint,80,opt,name=field80,proto3" json:"field80,omitempty"`
	Field81              bool     `protobuf:"varint,81,opt,name=field81,proto3" json:"field81,omitempty"`
	Field2               int32    `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3               int32    `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field280             int32    `protobuf:"varint,280,opt,name=field280,proto3" json:"field280,omitempty"`
	Field6               int32    `protobuf:"varint,6,opt,name=field6,proto3" json:"field6,omitempty"`
	Field22              int64    `protobuf:"varint,22,opt,name=field22,proto3" json:"field22,omitempty"`
	Field4               string   `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5               []uint64 `protobuf:"fixed64,5,rep,packed,name=field5,proto3" json:"field5,omitempty"`
	Field59              bool     `protobuf:"varint,59,opt,name=field59,proto3" json:"field59,omitempty"`
	Field7               string   `protobuf:"bytes,7,opt,name=field7,proto3" json:"field7,omitempty"`
	Field16              int32    `protobuf:"varint,16,opt,name=field16,proto3" json:"field16,omitempty"`
	Field130             int32    `protobuf:"varint,130,opt,name=field130,proto3" json:"field130,omitempty"`
	Field12              bool     `protobuf:"varint,12,opt,name=field12,proto3" json:"field12,omitempty"`
	Field17              bool     `protobuf:"varint,17,opt,name=field17,proto3" json:"field17,omitempty"`
	Field13              bool     `protobuf:"varint,13,opt,name=field13,proto3" json:"field13,omitempty"`
	Field14              bool     `protobuf:"varint,14,opt,name=field14,proto3" json:"field14,omitempty"`
	Field104             int32    `protobuf:"varint,104,opt,name=field104,proto3" json:"field104,omitempty"`
	Field100             int32    `protobuf:"varint,100,opt,name=field100,proto3" json:"field100,omitempty"`
	Field101             int32    `protobuf:"varint,101,opt,name=field101,proto3" json:"field101,omitempty"`
	Field102             string   `protobuf:"bytes,102,opt,name=field102,proto3" json:"field102,omitempty"`
	Field103             string   `protobuf:"bytes,103,opt,name=field103,proto3" json:"field103,omitempty"`
	Field29              int32    `protobuf:"varint,29,opt,name=field29,proto3" json:"field29,omitempty"`
	Field30              bool     `protobuf:"varint,30,opt,name=field30,proto3" json:"field30,omitempty"`
	Field60              int32    `protobuf:"varint,60,opt,name=field60,proto3" json:"field60,omitempty"`
	Field271             int32    `protobuf:"varint,271,opt,name=field271,proto3" json:"field271,omitempty"`
	Field272             int32    `protobuf:"varint,272,opt,name=field272,proto3" json:"field272,omitempty"`
	Field150             int32    `protobuf:"varint,150,opt,name=field150,proto3" json:"field150,omitempty"`
	Field23              int32    `protobuf:"varint,23,opt,name=field23,proto3" json:"field23,omitempty"`
	Field24              bool     `protobuf:"varint,24,opt,name=field24,proto3" json:"field24,omitempty"`
	Field25              int32    `protobuf:"varint,25,opt,name=field25,proto3" json:"field25,omitempty"`
	Field78              bool     `protobuf:"varint,78,opt,name=field78,proto3" json:"field78,omitempty"`
	Field67              int32    `protobuf:"varint,67,opt,name=field67,proto3" json:"field67,omitempty"`
	Field68              int32    `protobuf:"varint,68,opt,name=field68,proto3" json:"field68,omitempty"`
	Field128             int32    `protobuf:"varint,128,opt,name=field128,proto3" json:"field128,omitempty"`
	Field129             string   `protobuf:"bytes,129,opt,name=field129,proto3" json:"field129,omitempty"`
	Field131             int32    `protobuf:"varint,131,opt,name=field131,proto3" json:"field131,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BenchmarkMessage) Reset()         { *m = BenchmarkMessage{} }
func (m *BenchmarkMessage) String() string { return proto.CompactTextString(m) }
func (*BenchmarkMessage) ProtoMessage()    {}
func (*BenchmarkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6748da5c3d49697b, []int{0}
}

func (m *BenchmarkMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchmarkMessage.Unmarshal(m, b)
}
func (m *BenchmarkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchmarkMessage.Marshal(b, m, deterministic)
}
func (m *BenchmarkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkMessage.Merge(m, src)
}
func (m *BenchmarkMessage) XXX_Size() int {
	return xxx_messageInfo_BenchmarkMessage.Size(m)
}
func (m *BenchmarkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkMessage proto.InternalMessageInfo

func (m *BenchmarkMessage) GetField1() string {
	if m != nil {
		return m.Field1
	}
	return ""
}

func (m *BenchmarkMessage) GetField9() string {
	if m != nil {
		return m.Field9
	}
	return ""
}

func (m *BenchmarkMessage) GetField18() string {
	if m != nil {
		return m.Field18
	}
	return ""
}

func (m *BenchmarkMessage) GetField80() bool {
	if m != nil {
		return m.Field80
	}
	return false
}

func (m *BenchmarkMessage) GetField81() bool {
	if m != nil {
		return m.Field81
	}
	return false
}

func (m *BenchmarkMessage) GetField2() int32 {
	if m != nil {
		return m.Field2
	}
	return 0
}

func (m *BenchmarkMessage) GetField3() int32 {
	if m != nil {
		return m.Field3
	}
	return 0
}

func (m *BenchmarkMessage) GetField280() int32 {
	if m != nil {
		return m.Field280
	}
	return 0
}

func (m *BenchmarkMessage) GetField6() int32 {
	if m != nil {
		return m.Field6
	}
	return 0
}

func (m *BenchmarkMessage) GetField22() int64 {
	if m != nil {
		return m.Field22
	}
	return 0
}

func (m *BenchmarkMessage) GetField4() string {
	if m != nil {
		return m.Field4
	}
	return ""
}

func (m *BenchmarkMessage) GetField5() []uint64 {
	if m != nil {
		return m.Field5
	}
	return nil
}

func (m *BenchmarkMessage) GetField59() bool {
	if m != nil {
		return m.Field59
	}
	return false
}

func (m *BenchmarkMessage) GetField7() string {
	if m != nil {
		return m.Field7
	}
	return ""
}

func (m *BenchmarkMessage) GetField16() int32 {
	if m != nil {
		return m.Field16
	}
	return 0
}

func (m *BenchmarkMessage) GetField130() int32 {
	if m != nil {
		return m.Field130
	}
	return 0
}

func (m *BenchmarkMessage) GetField12() bool {
	if m != nil {
		return m.Field12
	}
	return false
}

func (m *BenchmarkMessage) GetField17() bool {
	if m != nil {
		return m.Field17
	}
	return false
}

func (m *BenchmarkMessage) GetField13() bool {
	if m != nil {
		return m.Field13
	}
	return false
}

func (m *BenchmarkMessage) GetField14() bool {
	if m != nil {
		return m.Field14
	}
	return false
}

func (m *BenchmarkMessage) GetField104() int32 {
	if m != nil {
		return m.Field104
	}
	return 0
}

func (m *BenchmarkMessage) GetField100() int32 {
	if m != nil {
		return m.Field100
	}
	return 0
}

func (m *BenchmarkMessage) GetField101() int32 {
	if m != nil {
		return m.Field101
	}
	return 0
}

func (m *BenchmarkMessage) GetField102() string {
	if m != nil {
		return m.Field102
	}
	return ""
}

func (m *BenchmarkMessage) GetField103() string {
	if m != nil {
		return m.Field103
	}
	return ""
}

func (m *BenchmarkMessage) GetField29() int32 {
	if m != nil {
		return m.Field29
	}
	return 0
}

func (m *BenchmarkMessage) GetField30() bool {
	if m != nil {
		return m.Field30
	}
	return false
}

func (m *BenchmarkMessage) GetField60() int32 {
	if m != nil {
		return m.Field60
	}
	return 0
}

func (m *BenchmarkMessage) GetField271() int32 {
	if m != nil {
		return m.Field271
	}
	return 0
}

func (m *BenchmarkMessage) GetField272() int32 {
	if m != nil {
		return m.Field272
	}
	return 0
}

func (m *BenchmarkMessage) GetField150() int32 {
	if m != nil {
		return m.Field150
	}
	return 0
}

func (m *BenchmarkMessage) GetField23() int32 {
	if m != nil {
		return m.Field23
	}
	return 0
}

func (m *BenchmarkMessage) GetField24() bool {
	if m != nil {
		return m.Field24
	}
	return false
}

func (m *BenchmarkMessage) GetField25() int32 {
	if m != nil {
		return m.Field25
	}
	return 0
}

func (m *BenchmarkMessage) GetField78() bool {
	if m != nil {
		return m.Field78
	}
	return false
}

func (m *BenchmarkMessage) GetField67() int32 {
	if m != nil {
		return m.Field67
	}
	return 0
}

func (m *BenchmarkMessage) GetField68() int32 {
	if m != nil {
		return m.Field68
	}
	return 0
}

func (m *BenchmarkMessage) GetField128() int32 {
	if m != nil {
		return m.Field128
	}
	return 0
}

func (m *BenchmarkMessage) GetField129() string {
	if m != nil {
		return m.Field129
	}
	return ""
}

func (m *BenchmarkMessage) GetField131() int32 {
	if m != nil {
		return m.Field131
	}
	return 0
}

func init() {
	proto.RegisterType((*BenchmarkMessage)(nil), "pb.BenchmarkMessage")
}

func init() { proto.RegisterFile("micro_benchmark.proto", fileDescriptor_6748da5c3d49697b) }

var fileDescriptor_6748da5c3d49697b = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x4d, 0x6e, 0x13, 0x41,
	0x10, 0x85, 0x19, 0x1b, 0x3b, 0xce, 0x08, 0x50, 0x18, 0x41, 0x78, 0x04, 0x81, 0x46, 0x59, 0xcd,
	0xca, 0xea, 0xae, 0x9e, 0x5f, 0x91, 0x55, 0x60, 0x91, 0x0d, 0x08, 0xcc, 0x01, 0x90, 0x9d, 0x4c,
	0x7e, 0x84, 0x83, 0x2d, 0x87, 0x0d, 0x3b, 0x7e, 0x0e, 0x00, 0x2b, 0xc4, 0x41, 0x38, 0x20, 0x92,
	0xed, 0xe9, 0x7a, 0x8d, 0x58, 0xd6, 0xfb, 0xa6, 0xba, 0x5e, 0x55, 0xd7, 0x74, 0xfc, 0xf0, 0xfa,
	0xea, 0x74, 0xb5, 0x78, 0x3f, 0x6b, 0x3f, 0x9e, 0x5e, 0x5e, 0x4f, 0x57, 0x1f, 0xc6, 0xcb, 0xd5,
	0xe2, 0xd3, 0x22, 0xe9, 0x2d, 0x67, 0x87, 0x7f, 0x46, 0xf1, 0xde, 0x71, 0xa7, 0xbf, 0x6a, 0x6f,
	0x6e, 0xa6, 0x17, 0x6d, 0xb2, 0x1f, 0x0f, 0xcf, 0xaf, 0xda, 0xf9, 0x99, 0x45, 0x94, 0x46, 0xd9,
	0xee, 0x64, 0x1b, 0x79, 0xbd, 0xc1, 0x2e, 0xe9, 0x4d, 0x82, 0x78, 0x67, 0xf3, 0x45, 0x8d, 0x64,
	0x0d, 0xba, 0xd0, 0x93, 0xda, 0xe0, 0x4d, 0x1a, 0x65, 0xa3, 0x49, 0x17, 0x2a, 0xb1, 0x78, 0xcb,
	0x44, 0xab, 0x08, 0x7a, 0x69, 0x94, 0x0d, 0xb6, 0x55, 0xc4, 0xeb, 0x0e, 0x7d, 0xd2, 0x5d, 0xf2,
	0x24, 0x1e, 0x6d, 0xbe, 0xa8, 0x0d, 0x7e, 0x6f, 0x52, 0xbc, 0xe0, 0x93, 0x4a, 0x0c, 0x29, 0xa9,
	0xf4, 0xe5, 0x45, 0xb0, 0x9f, 0x46, 0x59, 0x7f, 0xd2, 0x85, 0x3e, 0x23, 0xc7, 0x6d, 0x6a, 0x32,
	0xf7, 0x7a, 0x81, 0x41, 0xda, 0xcf, 0x86, 0x5b, 0xbd, 0xf0, 0x27, 0x15, 0x0d, 0x9e, 0x53, 0x23,
	0x45, 0xe3, 0x33, 0x2a, 0xec, 0xd0, 0x49, 0x95, 0x8e, 0xab, 0xc4, 0xde, 0xda, 0x54, 0x17, 0xfa,
	0x56, 0xac, 0x33, 0xf8, 0x16, 0x51, 0x2b, 0xd6, 0xe9, 0xc4, 0xac, 0xe0, 0x0e, 0x15, 0xb2, 0xa2,
	0xa4, 0xc2, 0x7d, 0x26, 0x54, 0xca, 0xe1, 0x2e, 0x13, 0xa7, 0x24, 0xc7, 0x3d, 0x26, 0x79, 0x72,
	0xd0, 0x99, 0x30, 0x39, 0x2e, 0xd9, 0x83, 0x61, 0x66, 0x70, 0x16, 0x30, 0x43, 0xcc, 0xa2, 0x0d,
	0x98, 0x25, 0x26, 0x38, 0x5f, 0x0f, 0xc3, 0xc7, 0xc4, 0x1c, 0x2e, 0x02, 0xa6, 0x2e, 0xa5, 0xc1,
	0x53, 0x1a, 0x95, 0xe8, 0xce, 0x39, 0x83, 0x67, 0xe4, 0x9f, 0xe6, 0x54, 0x1a, 0x1c, 0x51, 0x4e,
	0x69, 0x74, 0x53, 0x2a, 0x8b, 0x1f, 0xc1, 0xa6, 0x54, 0x96, 0xa0, 0xe0, 0x67, 0x08, 0x45, 0x2f,
	0xa6, 0x30, 0xf8, 0x15, 0x5c, 0x4c, 0xa1, 0x05, 0xc5, 0xe1, 0x11, 0x9b, 0x24, 0xfb, 0x39, 0x40,
	0x26, 0x25, 0x57, 0x52, 0xe0, 0x31, 0xe7, 0xe8, 0x3e, 0x55, 0x35, 0x5e, 0x53, 0x4e, 0xa5, 0x3f,
	0x53, 0x59, 0xe1, 0x05, 0x37, 0xa6, 0xd7, 0x5c, 0xd6, 0x78, 0xc9, 0xa4, 0x56, 0xe3, 0x52, 0xe3,
	0x4b, 0x60, 0x5c, 0x18, 0x36, 0xf8, 0x1a, 0xf1, 0xe8, 0xa5, 0xa1, 0x5d, 0xb4, 0xf8, 0x1e, 0xee,
	0xa2, 0x95, 0xa3, 0x78, 0x70, 0xd2, 0xce, 0xe7, 0x8b, 0xc4, 0xc5, 0xfd, 0x77, 0xd3, 0xcf, 0xc9,
	0x83, 0xf1, 0x72, 0x36, 0xfe, 0xf7, 0x1d, 0x39, 0xf8, 0xaf, 0x7a, 0x78, 0xeb, 0xb8, 0x77, 0x12,
	0xcd, 0x86, 0xeb, 0x37, 0xc8, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x08, 0x24, 0x9e, 0x92, 0x9c,
	0x04, 0x00, 0x00,
}
