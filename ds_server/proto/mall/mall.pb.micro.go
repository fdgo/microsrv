// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mall.proto

package ds_srv_mall

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errex if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errex if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Mall service

type MallService interface {
	GetProductByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error)
	GetProductDetailByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error)
	SelectProducts(ctx context.Context, in *SelectProductRequest, opts ...client.CallOption) (*Response, error)
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...client.CallOption) (*Response, error)
	SearchAddress(ctx context.Context, in *RequestAddressID, opts ...client.CallOption) (*Response, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*Response, error)
	SearchOrder(ctx context.Context, in *SelectOrderRequest, opts ...client.CallOption) (*Response, error)
	PayOrder(ctx context.Context, in *PayOrderRequest, opts ...client.CallOption) (*Response, error)
	GetOrderByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error)
}

type mallService struct {
	c    client.Client
	name string
}

func NewMallService(name string, c client.Client) MallService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ds.srv.mall"
	}
	return &mallService{
		c:    c,
		name: name,
	}
}

func (c *mallService) GetProductByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.GetProductByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) GetProductDetailByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.GetProductDetailByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) SelectProducts(ctx context.Context, in *SelectProductRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.SelectProducts", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.CreateAddress", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) SearchAddress(ctx context.Context, in *RequestAddressID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.SearchAddress", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.CreateOrder", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) SearchOrder(ctx context.Context, in *SelectOrderRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.SearchOrder", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.PayOrder", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallService) GetOrderByID(ctx context.Context, in *ProductByID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Mall.GetOrderByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mall service

type MallHandler interface {
	GetProductByID(context.Context, *ProductByID, *Response) error
	GetProductDetailByID(context.Context, *ProductByID, *Response) error
	SelectProducts(context.Context, *SelectProductRequest, *Response) error
	CreateAddress(context.Context, *CreateAddressRequest, *Response) error
	SearchAddress(context.Context, *RequestAddressID, *Response) error
	CreateOrder(context.Context, *CreateOrderRequest, *Response) error
	SearchOrder(context.Context, *SelectOrderRequest, *Response) error
	PayOrder(context.Context, *PayOrderRequest, *Response) error
	GetOrderByID(context.Context, *ProductByID, *Response) error
}

func RegisterMallHandler(s server.Server, hdlr MallHandler, opts ...server.HandlerOption) error {
	type mall interface {
		GetProductByID(ctx context.Context, in *ProductByID, out *Response) error
		GetProductDetailByID(ctx context.Context, in *ProductByID, out *Response) error
		SelectProducts(ctx context.Context, in *SelectProductRequest, out *Response) error
		CreateAddress(ctx context.Context, in *CreateAddressRequest, out *Response) error
		SearchAddress(ctx context.Context, in *RequestAddressID, out *Response) error
		CreateOrder(ctx context.Context, in *CreateOrderRequest, out *Response) error
		SearchOrder(ctx context.Context, in *SelectOrderRequest, out *Response) error
		PayOrder(ctx context.Context, in *PayOrderRequest, out *Response) error
		GetOrderByID(ctx context.Context, in *ProductByID, out *Response) error
	}
	type Mall struct {
		mall
	}
	h := &mallHandler{hdlr}
	return s.Handle(s.NewHandler(&Mall{h}, opts...))
}

type mallHandler struct {
	MallHandler
}

func (h *mallHandler) GetProductByID(ctx context.Context, in *ProductByID, out *Response) error {
	return h.MallHandler.GetProductByID(ctx, in, out)
}

func (h *mallHandler) GetProductDetailByID(ctx context.Context, in *ProductByID, out *Response) error {
	return h.MallHandler.GetProductDetailByID(ctx, in, out)
}

func (h *mallHandler) SelectProducts(ctx context.Context, in *SelectProductRequest, out *Response) error {
	return h.MallHandler.SelectProducts(ctx, in, out)
}

func (h *mallHandler) CreateAddress(ctx context.Context, in *CreateAddressRequest, out *Response) error {
	return h.MallHandler.CreateAddress(ctx, in, out)
}

func (h *mallHandler) SearchAddress(ctx context.Context, in *RequestAddressID, out *Response) error {
	return h.MallHandler.SearchAddress(ctx, in, out)
}

func (h *mallHandler) CreateOrder(ctx context.Context, in *CreateOrderRequest, out *Response) error {
	return h.MallHandler.CreateOrder(ctx, in, out)
}

func (h *mallHandler) SearchOrder(ctx context.Context, in *SelectOrderRequest, out *Response) error {
	return h.MallHandler.SearchOrder(ctx, in, out)
}

func (h *mallHandler) PayOrder(ctx context.Context, in *PayOrderRequest, out *Response) error {
	return h.MallHandler.PayOrder(ctx, in, out)
}

func (h *mallHandler) GetOrderByID(ctx context.Context, in *ProductByID, out *Response) error {
	return h.MallHandler.GetOrderByID(ctx, in, out)
}
