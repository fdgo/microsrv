// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

package ds_srv_message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errex if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errex if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	GetMessageByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error)
	GetMessageDetailByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error)
	SelectMessage(ctx context.Context, in *SelectMessageRequest, opts ...client.CallOption) (*Response, error)
	CreateMessage(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error)
	CreateMessageDetail(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error)
	GetMessageID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error)
	CreateMessageUrl(ctx context.Context, in *UrlRequest, opts ...client.CallOption) (*Response, error)
	SearchBanner(ctx context.Context, in *SelectBannerRequest, opts ...client.CallOption) (*Response, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ds.srv.message"
	}
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) GetMessageByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.GetMessageByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) GetMessageDetailByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.GetMessageDetailByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SelectMessage(ctx context.Context, in *SelectMessageRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.SelectMessage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) CreateMessage(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.CreateMessage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) CreateMessageDetail(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.CreateMessageDetail", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) GetMessageID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error) {
	req := c.c.NewRequest(c.name, "Message.GetMessageID", in)
	out := new(IdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) CreateMessageUrl(ctx context.Context, in *UrlRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.CreateMessageUrl", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) SearchBanner(ctx context.Context, in *SelectBannerRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.SearchBanner", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	GetMessageByID(context.Context, *IdRequest, *Response) error
	GetMessageDetailByID(context.Context, *IdRequest, *Response) error
	SelectMessage(context.Context, *SelectMessageRequest, *Response) error
	CreateMessage(context.Context, *CreateRequest, *Response) error
	CreateMessageDetail(context.Context, *CreateRequest, *Response) error
	GetMessageID(context.Context, *IdRequest, *IdResponse) error
	CreateMessageUrl(context.Context, *UrlRequest, *Response) error
	SearchBanner(context.Context, *SelectBannerRequest, *Response) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) error {
	type message interface {
		GetMessageByID(ctx context.Context, in *IdRequest, out *Response) error
		GetMessageDetailByID(ctx context.Context, in *IdRequest, out *Response) error
		SelectMessage(ctx context.Context, in *SelectMessageRequest, out *Response) error
		CreateMessage(ctx context.Context, in *CreateRequest, out *Response) error
		CreateMessageDetail(ctx context.Context, in *CreateRequest, out *Response) error
		GetMessageID(ctx context.Context, in *IdRequest, out *IdResponse) error
		CreateMessageUrl(ctx context.Context, in *UrlRequest, out *Response) error
		SearchBanner(ctx context.Context, in *SelectBannerRequest, out *Response) error
	}
	type Message struct {
		message
	}
	h := &messageHandler{hdlr}
	return s.Handle(s.NewHandler(&Message{h}, opts...))
}

type messageHandler struct {
	MessageHandler
}

func (h *messageHandler) GetMessageByID(ctx context.Context, in *IdRequest, out *Response) error {
	return h.MessageHandler.GetMessageByID(ctx, in, out)
}

func (h *messageHandler) GetMessageDetailByID(ctx context.Context, in *IdRequest, out *Response) error {
	return h.MessageHandler.GetMessageDetailByID(ctx, in, out)
}

func (h *messageHandler) SelectMessage(ctx context.Context, in *SelectMessageRequest, out *Response) error {
	return h.MessageHandler.SelectMessage(ctx, in, out)
}

func (h *messageHandler) CreateMessage(ctx context.Context, in *CreateRequest, out *Response) error {
	return h.MessageHandler.CreateMessage(ctx, in, out)
}

func (h *messageHandler) CreateMessageDetail(ctx context.Context, in *CreateRequest, out *Response) error {
	return h.MessageHandler.CreateMessageDetail(ctx, in, out)
}

func (h *messageHandler) GetMessageID(ctx context.Context, in *IdRequest, out *IdResponse) error {
	return h.MessageHandler.GetMessageID(ctx, in, out)
}

func (h *messageHandler) CreateMessageUrl(ctx context.Context, in *UrlRequest, out *Response) error {
	return h.MessageHandler.CreateMessageUrl(ctx, in, out)
}

func (h *messageHandler) SearchBanner(ctx context.Context, in *SelectBannerRequest, out *Response) error {
	return h.MessageHandler.SearchBanner(ctx, in, out)
}
