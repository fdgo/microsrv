// Code generated by proto-gen-gogo. DO NOT EDIT.
// source: shopproto/user/user.proto

/*
	Package shop_srv_shopproto is a generated protocol buffer package.

	It is generated from these files:
		shopproto/user/user.proto

	It has these top-level messages:
		UserInfo
*/
package shop_srv_shopproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// StarMaker 用户信息
type UserInfo struct {
	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Nickname      string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RealName      string `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"`
	Sex           string `protobuf:"bytes,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Avatar        string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Remark        string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	IsRecommend   string `protobuf:"bytes,7,opt,name=isRecommend,proto3" json:"isRecommend,omitempty"`
	RecommendCode string `protobuf:"bytes,8,opt,name=recommendCode,proto3" json:"recommendCode,omitempty"`
	Duration      int64  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Integral      int32  `protobuf:"varint,10,opt,name=integral,proto3" json:"integral,omitempty"`
	Commission    int32  `protobuf:"varint,11,opt,name=commission,proto3" json:"commission,omitempty"`
	Status        string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	IsBindWx      bool   `protobuf:"varint,13,opt,name=isBindWx,proto3" json:"isBindWx,omitempty"`
	IsBindPhone   bool   `protobuf:"varint,14,opt,name=isBindPhone,proto3" json:"isBindPhone,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserInfo) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *UserInfo) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UserInfo) GetIsRecommend() string {
	if m != nil {
		return m.IsRecommend
	}
	return ""
}

func (m *UserInfo) GetRecommendCode() string {
	if m != nil {
		return m.RecommendCode
	}
	return ""
}

func (m *UserInfo) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *UserInfo) GetIntegral() int32 {
	if m != nil {
		return m.Integral
	}
	return 0
}

func (m *UserInfo) GetCommission() int32 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *UserInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UserInfo) GetIsBindWx() bool {
	if m != nil {
		return m.IsBindWx
	}
	return false
}

func (m *UserInfo) GetIsBindPhone() bool {
	if m != nil {
		return m.IsBindPhone
	}
	return false
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "shop.srv.shopproto.UserInfo")
}
func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.RealName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.RealName)))
		i += copy(dAtA[i:], m.RealName)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if len(m.IsRecommend) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.IsRecommend)))
		i += copy(dAtA[i:], m.IsRecommend)
	}
	if len(m.RecommendCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.RecommendCode)))
		i += copy(dAtA[i:], m.RecommendCode)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Duration))
	}
	if m.Integral != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Integral))
	}
	if m.Commission != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Commission))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.IsBindWx {
		dAtA[i] = 0x68
		i++
		if m.IsBindWx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBindPhone {
		dAtA[i] = 0x70
		i++
		if m.IsBindPhone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.RealName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.IsRecommend)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.RecommendCode)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovUser(uint64(m.Duration))
	}
	if m.Integral != 0 {
		n += 1 + sovUser(uint64(m.Integral))
	}
	if m.Commission != 0 {
		n += 1 + sovUser(uint64(m.Commission))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.IsBindWx {
		n += 2
	}
	if m.IsBindPhone {
		n += 2
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsRecommend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integral", wireType)
			}
			m.Integral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Integral |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			m.Commission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commission |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBindWx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBindWx = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBindPhone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBindPhone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shopproto/user/user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0xa1, 0x25, 0x75, 0x29, 0xaa, 0x3c, 0xa0, 0x83, 0x21, 0x8a, 0x10, 0x43, 0xa6,
	0x32, 0xf0, 0x06, 0x65, 0xea, 0x82, 0x50, 0x24, 0xc4, 0x6c, 0x1a, 0x43, 0xad, 0x36, 0x76, 0xe5,
	0x73, 0xaa, 0x3e, 0x07, 0x13, 0x8f, 0xc4, 0xc8, 0x23, 0xa0, 0xf0, 0x22, 0xe8, 0x6c, 0x1a, 0x85,
	0x25, 0xba, 0xef, 0xff, 0x2e, 0x77, 0x17, 0x85, 0x5f, 0xe2, 0xca, 0x6e, 0xb7, 0xce, 0x7a, 0x7b,
	0xdb, 0xa0, 0x72, 0xe1, 0x31, 0x0b, 0x2c, 0x04, 0xa9, 0x19, 0xba, 0xdd, 0xac, 0xeb, 0xb9, 0x7e,
	0x4f, 0x78, 0xfa, 0x84, 0xca, 0x2d, 0xcc, 0xab, 0x15, 0x17, 0x7c, 0x48, 0xed, 0x8b, 0x0a, 0x58,
	0xce, 0x8a, 0x51, 0xf9, 0x47, 0xe2, 0x8a, 0xa7, 0x46, 0x2f, 0xd7, 0x46, 0xd6, 0x0a, 0x8e, 0x83,
	0xe9, 0x98, 0x9c, 0x53, 0x72, 0xf3, 0x40, 0x2e, 0x89, 0xee, 0xc0, 0x62, 0xca, 0x13, 0x54, 0x7b,
	0x38, 0x09, 0x31, 0x95, 0xb4, 0x41, 0xee, 0xa4, 0x97, 0x0e, 0x06, 0x71, 0x43, 0x24, 0xca, 0x9d,
	0xaa, 0xa5, 0x5b, 0xc3, 0x30, 0xe6, 0x91, 0x44, 0xce, 0xc7, 0x1a, 0x4b, 0xb5, 0xb4, 0x75, 0xad,
	0x4c, 0x05, 0xa7, 0x41, 0xf6, 0x23, 0x71, 0xc3, 0x27, 0xee, 0x00, 0xf7, 0xb6, 0x52, 0x90, 0x86,
	0x9e, 0xff, 0x21, 0x5d, 0x59, 0x35, 0x4e, 0x7a, 0x6d, 0x0d, 0x8c, 0x72, 0x56, 0x24, 0x65, 0xc7,
	0xe4, 0xb4, 0xf1, 0xea, 0xcd, 0xc9, 0x0d, 0xf0, 0x9c, 0x15, 0x83, 0xb2, 0x63, 0x91, 0x71, 0x4e,
	0x63, 0x34, 0x22, 0xbd, 0x39, 0x0e, 0xb6, 0x97, 0xd0, 0xdd, 0xe8, 0xa5, 0x6f, 0x10, 0xce, 0xe2,
	0xdd, 0x91, 0xc2, 0x4c, 0x9c, 0x6b, 0x53, 0x3d, 0xef, 0x61, 0x92, 0xb3, 0x22, 0x2d, 0x3b, 0x8e,
	0xdf, 0x44, 0xf5, 0xe3, 0xca, 0x1a, 0x05, 0xe7, 0x41, 0xf7, 0xa3, 0xf9, 0xf4, 0xb3, 0xcd, 0xd8,
	0x57, 0x9b, 0xb1, 0xef, 0x36, 0x63, 0x1f, 0x3f, 0xd9, 0xd1, 0xcb, 0x30, 0xfc, 0xad, 0xbb, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xa2, 0x55, 0xe2, 0xde, 0x01, 0x00, 0x00,
}
