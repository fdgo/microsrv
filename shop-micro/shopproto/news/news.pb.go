// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shopproto/news/news.proto

package shop_srv_shopproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type News struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbUrl             string   `protobuf:"bytes,3,opt,name=thumbUrl,proto3" json:"thumbUrl,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Avatar               string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ReadCount            int32    `protobuf:"varint,6,opt,name=readCount,proto3" json:"readCount,omitempty"`
	CommentCount         int32    `protobuf:"varint,7,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
	LikeCount            int32    `protobuf:"varint,8,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	Category             string   `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	ViewType             int32    `protobuf:"varint,10,opt,name=viewType,proto3" json:"viewType,omitempty"`
	IsRecommend          int32    `protobuf:"varint,11,opt,name=isRecommend,proto3" json:"isRecommend,omitempty"`
	Content              string   `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime           string   `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *News) Reset()         { *m = News{} }
func (m *News) String() string { return proto.CompactTextString(m) }
func (*News) ProtoMessage()    {}
func (*News) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6a84ca4f986696a, []int{0}
}
func (m *News) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *News) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_News.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *News) XXX_Merge(src proto.Message) {
	xxx_messageInfo_News.Merge(m, src)
}
func (m *News) XXX_Size() int {
	return m.Size()
}
func (m *News) XXX_DiscardUnknown() {
	xxx_messageInfo_News.DiscardUnknown(m)
}

var xxx_messageInfo_News proto.InternalMessageInfo

func (m *News) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetThumbUrl() string {
	if m != nil {
		return m.ThumbUrl
	}
	return ""
}

func (m *News) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *News) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *News) GetReadCount() int32 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *News) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *News) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *News) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *News) GetViewType() int32 {
	if m != nil {
		return m.ViewType
	}
	return 0
}

func (m *News) GetIsRecommend() int32 {
	if m != nil {
		return m.IsRecommend
	}
	return 0
}

func (m *News) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *News) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type NewsCategory struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsCategory) Reset()         { *m = NewsCategory{} }
func (m *NewsCategory) String() string { return proto.CompactTextString(m) }
func (*NewsCategory) ProtoMessage()    {}
func (*NewsCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6a84ca4f986696a, []int{1}
}
func (m *NewsCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewsCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewsCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewsCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsCategory.Merge(m, src)
}
func (m *NewsCategory) XXX_Size() int {
	return m.Size()
}
func (m *NewsCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsCategory.DiscardUnknown(m)
}

var xxx_messageInfo_NewsCategory proto.InternalMessageInfo

func (m *NewsCategory) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewsCategory) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*News)(nil), "shop.srv.shopproto.News")
	proto.RegisterType((*NewsCategory)(nil), "shop.srv.shopproto.NewsCategory")
}

func init() { proto.RegisterFile("shopproto/news/news.proto", fileDescriptor_b6a84ca4f986696a) }

var fileDescriptor_b6a84ca4f986696a = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xdd, 0x42, 0xf9, 0x33, 0xa0, 0x31, 0x1b, 0x63, 0x46, 0x63, 0x9a, 0x86, 0x13, 0x27,
	0x3c, 0xe8, 0x13, 0xc8, 0xdd, 0x43, 0x83, 0x0f, 0x50, 0xda, 0x89, 0x6c, 0xa4, 0x5d, 0xb2, 0x1d,
	0x20, 0xbc, 0x89, 0x8f, 0xe4, 0xd1, 0x47, 0x30, 0x78, 0xf5, 0x21, 0x4c, 0xa7, 0x50, 0xca, 0x65,
	0x93, 0xdf, 0xf7, 0x7d, 0x3b, 0x3b, 0xf9, 0x16, 0xee, 0x8a, 0x85, 0x5d, 0xad, 0x9c, 0x65, 0xfb,
	0x98, 0xd3, 0xb6, 0x90, 0x63, 0x22, 0xac, 0x75, 0x69, 0x4d, 0x0a, 0xb7, 0x99, 0xd4, 0x99, 0xd1,
	0x9f, 0x07, 0xed, 0x57, 0xda, 0x16, 0xfa, 0x0a, 0x3c, 0x93, 0xa2, 0x0a, 0xd5, 0xb8, 0x15, 0x79,
	0x26, 0xd5, 0x37, 0xe0, 0xb3, 0xe1, 0x25, 0xa1, 0x17, 0xaa, 0x71, 0x3f, 0xaa, 0x40, 0xdf, 0x43,
	0x8f, 0x17, 0xeb, 0x6c, 0xfe, 0xe6, 0x96, 0xd8, 0x12, 0xa3, 0x66, 0x7d, 0x0b, 0x9d, 0x78, 0xcd,
	0x0b, 0xeb, 0xb0, 0x2d, 0xce, 0x81, 0x44, 0xdf, 0xc4, 0x1c, 0x3b, 0xf4, 0x0f, 0xba, 0x90, 0x7e,
	0x80, 0xbe, 0xa3, 0x38, 0x9d, 0xda, 0x75, 0xce, 0xd8, 0x09, 0xd5, 0xd8, 0x8f, 0x4e, 0x82, 0x1e,
	0xc1, 0x30, 0xb1, 0x59, 0x46, 0x39, 0x57, 0x81, 0xae, 0x04, 0xce, 0xb4, 0x72, 0xc2, 0xd2, 0x7c,
	0x50, 0x15, 0xe8, 0x55, 0x13, 0x6a, 0xa1, 0xdc, 0x35, 0x89, 0x99, 0xde, 0xad, 0xdb, 0x61, 0xbf,
	0xda, 0xf5, 0xc8, 0xa5, 0xb7, 0x31, 0xb4, 0x9d, 0xed, 0x56, 0x84, 0x20, 0x17, 0x6b, 0xd6, 0x21,
	0x0c, 0x4c, 0x11, 0x51, 0xf5, 0x52, 0x8a, 0x03, 0xb1, 0x9b, 0x92, 0x46, 0xe8, 0x26, 0x36, 0x67,
	0xca, 0x19, 0x87, 0x32, 0xf8, 0x88, 0x3a, 0x00, 0x48, 0x1c, 0xc5, 0x4c, 0x33, 0x93, 0x11, 0x5e,
	0x8a, 0xd9, 0x50, 0x46, 0xcf, 0x30, 0x2c, 0xdb, 0x9e, 0x1e, 0xf7, 0x38, 0xb5, 0xee, 0x9f, 0xb7,
	0xde, 0x6a, 0xb4, 0xfe, 0x72, 0xfd, 0xb5, 0x0f, 0xd4, 0xf7, 0x3e, 0x50, 0x3f, 0xfb, 0x40, 0x7d,
	0xfe, 0x06, 0x17, 0xf3, 0x8e, 0xfc, 0xde, 0xd3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x52,
	0xbb, 0xf3, 0xee, 0x01, 0x00, 0x00,
}

func (m *News) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *News) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *News) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintNews(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x62
	}
	if m.IsRecommend != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.IsRecommend))
		i--
		dAtA[i] = 0x58
	}
	if m.ViewType != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.ViewType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LikeCount != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x40
	}
	if m.CommentCount != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.CommentCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ReadCount != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.ReadCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ThumbUrl) > 0 {
		i -= len(m.ThumbUrl)
		copy(dAtA[i:], m.ThumbUrl)
		i = encodeVarintNews(dAtA, i, uint64(len(m.ThumbUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewsCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewsCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNews(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintNews(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNews(dAtA []byte, offset int, v uint64) int {
	offset -= sovNews(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *News) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNews(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.ThumbUrl)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.ReadCount != 0 {
		n += 1 + sovNews(uint64(m.ReadCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovNews(uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovNews(uint64(m.LikeCount))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.ViewType != 0 {
		n += 1 + sovNews(uint64(m.ViewType))
	}
	if m.IsRecommend != 0 {
		n += 1 + sovNews(uint64(m.IsRecommend))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewsCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNews(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNews(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNews(x uint64) (n int) {
	return sovNews(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *News) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: News: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: News: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewType", wireType)
			}
			m.ViewType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			m.IsRecommend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRecommend |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNews
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNews(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNews
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNews
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNews
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNews
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNews        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNews          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNews = fmt.Errorf("proto: unexpected end of group")
)
