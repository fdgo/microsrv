// Code generated by proto-gen-gogo. DO NOT EDIT.
// source: shopproto/news/news.proto

/*
	Package shop_srv_shopproto is a generated protocol buffer package.

	It is generated from these files:
		shopproto/news/news.proto

	It has these top-level messages:
		News
		NewsCategory
*/
package shop_srv_shopproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type News struct {
	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbUrl     string `protobuf:"bytes,3,opt,name=thumbUrl,proto3" json:"thumbUrl,omitempty"`
	Author       string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Avatar       string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ReadCount    int32  `protobuf:"varint,6,opt,name=readCount,proto3" json:"readCount,omitempty"`
	CommentCount int32  `protobuf:"varint,7,opt,name=commentCount,proto3" json:"commentCount,omitempty"`
	LikeCount    int32  `protobuf:"varint,8,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	Category     string `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	ViewType     int32  `protobuf:"varint,10,opt,name=viewType,proto3" json:"viewType,omitempty"`
	IsRecommend  int32  `protobuf:"varint,11,opt,name=isRecommend,proto3" json:"isRecommend,omitempty"`
	Content      string `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime   string `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptorNews, []int{0} }

func (m *News) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetThumbUrl() string {
	if m != nil {
		return m.ThumbUrl
	}
	return ""
}

func (m *News) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *News) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *News) GetReadCount() int32 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *News) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *News) GetLikeCount() int32 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *News) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *News) GetViewType() int32 {
	if m != nil {
		return m.ViewType
	}
	return 0
}

func (m *News) GetIsRecommend() int32 {
	if m != nil {
		return m.IsRecommend
	}
	return 0
}

func (m *News) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *News) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type NewsCategory struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *NewsCategory) Reset()                    { *m = NewsCategory{} }
func (m *NewsCategory) String() string            { return proto.CompactTextString(m) }
func (*NewsCategory) ProtoMessage()               {}
func (*NewsCategory) Descriptor() ([]byte, []int) { return fileDescriptorNews, []int{1} }

func (m *NewsCategory) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewsCategory) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*News)(nil), "shop.srv.shopproto.News")
	proto.RegisterType((*NewsCategory)(nil), "shop.srv.shopproto.NewsCategory")
}
func (m *News) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *News) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.ThumbUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.ThumbUrl)))
		i += copy(dAtA[i:], m.ThumbUrl)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.ReadCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.ReadCount))
	}
	if m.CommentCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.LikeCount))
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if m.ViewType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.ViewType))
	}
	if m.IsRecommend != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.IsRecommend))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	return i, nil
}

func (m *NewsCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNews(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNews(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func encodeVarintNews(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *News) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNews(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.ThumbUrl)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.ReadCount != 0 {
		n += 1 + sovNews(uint64(m.ReadCount))
	}
	if m.CommentCount != 0 {
		n += 1 + sovNews(uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovNews(uint64(m.LikeCount))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	if m.ViewType != 0 {
		n += 1 + sovNews(uint64(m.ViewType))
	}
	if m.IsRecommend != 0 {
		n += 1 + sovNews(uint64(m.IsRecommend))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	return n
}

func (m *NewsCategory) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNews(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNews(uint64(l))
	}
	return n
}

func sovNews(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNews(x uint64) (n int) {
	return sovNews(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *News) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: News: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: News: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewType", wireType)
			}
			m.ViewType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			m.IsRecommend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRecommend |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNews(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNews
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNews
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNews
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNews(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNews = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNews   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shopproto/news/news.proto", fileDescriptorNews) }

var fileDescriptorNews = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xdd, 0x42, 0xf9, 0x33, 0xa0, 0x31, 0x1b, 0x63, 0x46, 0x63, 0x9a, 0x86, 0x13, 0x27,
	0x3c, 0xe8, 0x13, 0xc8, 0xdd, 0x43, 0x83, 0x0f, 0x50, 0xda, 0x89, 0x6c, 0xa4, 0x5d, 0xb2, 0x1d,
	0x20, 0xbc, 0x89, 0x8f, 0xe4, 0xd1, 0x47, 0x30, 0x78, 0xf5, 0x21, 0x4c, 0xa7, 0x50, 0xca, 0x65,
	0x93, 0xdf, 0xf7, 0x7d, 0x3b, 0x3b, 0xf9, 0x16, 0xee, 0x8a, 0x85, 0x5d, 0xad, 0x9c, 0x65, 0xfb,
	0x98, 0xd3, 0xb6, 0x90, 0x63, 0x22, 0xac, 0x75, 0x69, 0x4d, 0x0a, 0xb7, 0x99, 0xd4, 0x99, 0xd1,
	0x9f, 0x07, 0xed, 0x57, 0xda, 0x16, 0xfa, 0x0a, 0x3c, 0x93, 0xa2, 0x0a, 0xd5, 0xb8, 0x15, 0x79,
	0x26, 0xd5, 0x37, 0xe0, 0xb3, 0xe1, 0x25, 0xa1, 0x17, 0xaa, 0x71, 0x3f, 0xaa, 0x40, 0xdf, 0x43,
	0x8f, 0x17, 0xeb, 0x6c, 0xfe, 0xe6, 0x96, 0xd8, 0x12, 0xa3, 0x66, 0x7d, 0x0b, 0x9d, 0x78, 0xcd,
	0x0b, 0xeb, 0xb0, 0x2d, 0xce, 0x81, 0x44, 0xdf, 0xc4, 0x1c, 0x3b, 0xf4, 0x0f, 0xba, 0x90, 0x7e,
	0x80, 0xbe, 0xa3, 0x38, 0x9d, 0xda, 0x75, 0xce, 0xd8, 0x09, 0xd5, 0xd8, 0x8f, 0x4e, 0x82, 0x1e,
	0xc1, 0x30, 0xb1, 0x59, 0x46, 0x39, 0x57, 0x81, 0xae, 0x04, 0xce, 0xb4, 0x72, 0xc2, 0xd2, 0x7c,
	0x50, 0x15, 0xe8, 0x55, 0x13, 0x6a, 0xa1, 0xdc, 0x35, 0x89, 0x99, 0xde, 0xad, 0xdb, 0x61, 0xbf,
	0xda, 0xf5, 0xc8, 0xa5, 0xb7, 0x31, 0xb4, 0x9d, 0xed, 0x56, 0x84, 0x20, 0x17, 0x6b, 0xd6, 0x21,
	0x0c, 0x4c, 0x11, 0x51, 0xf5, 0x52, 0x8a, 0x03, 0xb1, 0x9b, 0x92, 0x46, 0xe8, 0x26, 0x36, 0x67,
	0xca, 0x19, 0x87, 0x32, 0xf8, 0x88, 0x3a, 0x00, 0x48, 0x1c, 0xc5, 0x4c, 0x33, 0x93, 0x11, 0x5e,
	0x8a, 0xd9, 0x50, 0x46, 0xcf, 0x30, 0x2c, 0xdb, 0x9e, 0x1e, 0xf7, 0x38, 0xb5, 0xee, 0x9f, 0xb7,
	0xde, 0x6a, 0xb4, 0xfe, 0x72, 0xfd, 0xb5, 0x0f, 0xd4, 0xf7, 0x3e, 0x50, 0x3f, 0xfb, 0x40, 0x7d,
	0xfe, 0x06, 0x17, 0xf3, 0x8e, 0xfc, 0xde, 0xd3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x52,
	0xbb, 0xf3, 0xee, 0x01, 0x00, 0x00,
}
