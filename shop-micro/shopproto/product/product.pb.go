// Code generated by proto-gen-gogo. DO NOT EDIT.
// source: shopproto/product/product.proto

/*
	Package shop_srv_shopproto is a generated protocol buffer package.

	It is generated from these files:
		shopproto/product/product.proto

	It has these top-level messages:
		Product
*/
package shop_srv_shopproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	ProductId   int64  `protobuf:"varint,1,opt,name=productId,proto3" json:"productId,omitempty"`
	MerchantId  int64  `protobuf:"varint,2,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CategoryId  int32  `protobuf:"varint,4,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	Title       string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	SellPoint   string `protobuf:"bytes,6,opt,name=sellPoint,proto3" json:"sellPoint,omitempty"`
	Postage     int32  `protobuf:"varint,7,opt,name=postage,proto3" json:"postage,omitempty"`
	GoodsImages string `protobuf:"bytes,8,opt,name=goodsImages,proto3" json:"goodsImages,omitempty"`
	MemberPrice int32  `protobuf:"varint,9,opt,name=memberPrice,proto3" json:"memberPrice,omitempty"`
	Price       int32  `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`
	SoldCount   int32  `protobuf:"varint,11,opt,name=soldCount,proto3" json:"soldCount,omitempty"`
	Stock       int32  `protobuf:"varint,12,opt,name=stock,proto3" json:"stock,omitempty"`
	BuyMax      int32  `protobuf:"varint,13,opt,name=buyMax,proto3" json:"buyMax,omitempty"`
	Commission  int32  `protobuf:"varint,14,opt,name=commission,proto3" json:"commission,omitempty"`
	Integral    int32  `protobuf:"varint,15,opt,name=integral,proto3" json:"integral,omitempty"`
	Status      int32  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime  uint64 `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{0} }

func (m *Product) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Product) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *Product) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Product) GetCategoryId() int32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Product) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Product) GetSellPoint() string {
	if m != nil {
		return m.SellPoint
	}
	return ""
}

func (m *Product) GetPostage() int32 {
	if m != nil {
		return m.Postage
	}
	return 0
}

func (m *Product) GetGoodsImages() string {
	if m != nil {
		return m.GoodsImages
	}
	return ""
}

func (m *Product) GetMemberPrice() int32 {
	if m != nil {
		return m.MemberPrice
	}
	return 0
}

func (m *Product) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetSoldCount() int32 {
	if m != nil {
		return m.SoldCount
	}
	return 0
}

func (m *Product) GetStock() int32 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *Product) GetBuyMax() int32 {
	if m != nil {
		return m.BuyMax
	}
	return 0
}

func (m *Product) GetCommission() int32 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *Product) GetIntegral() int32 {
	if m != nil {
		return m.Integral
	}
	return 0
}

func (m *Product) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Product) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Product)(nil), "shop.srv.shopproto.Product")
}
func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductId))
	}
	if m.MerchantId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MerchantId))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.CategoryId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.CategoryId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.SellPoint) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.SellPoint)))
		i += copy(dAtA[i:], m.SellPoint)
	}
	if m.Postage != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Postage))
	}
	if len(m.GoodsImages) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.GoodsImages)))
		i += copy(dAtA[i:], m.GoodsImages)
	}
	if m.MemberPrice != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.MemberPrice))
	}
	if m.Price != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Price))
	}
	if m.SoldCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.SoldCount))
	}
	if m.Stock != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Stock))
	}
	if m.BuyMax != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.BuyMax))
	}
	if m.Commission != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Commission))
	}
	if m.Integral != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Integral))
	}
	if m.Status != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.Status))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.CreateTime))
	}
	return i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Product) Size() (n int) {
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovProduct(uint64(m.ProductId))
	}
	if m.MerchantId != 0 {
		n += 1 + sovProduct(uint64(m.MerchantId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.CategoryId != 0 {
		n += 1 + sovProduct(uint64(m.CategoryId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.SellPoint)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Postage != 0 {
		n += 1 + sovProduct(uint64(m.Postage))
	}
	l = len(m.GoodsImages)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.MemberPrice != 0 {
		n += 1 + sovProduct(uint64(m.MemberPrice))
	}
	if m.Price != 0 {
		n += 1 + sovProduct(uint64(m.Price))
	}
	if m.SoldCount != 0 {
		n += 1 + sovProduct(uint64(m.SoldCount))
	}
	if m.Stock != 0 {
		n += 1 + sovProduct(uint64(m.Stock))
	}
	if m.BuyMax != 0 {
		n += 1 + sovProduct(uint64(m.BuyMax))
	}
	if m.Commission != 0 {
		n += 1 + sovProduct(uint64(m.Commission))
	}
	if m.Integral != 0 {
		n += 1 + sovProduct(uint64(m.Integral))
	}
	if m.Status != 0 {
		n += 2 + sovProduct(uint64(m.Status))
	}
	if m.CreateTime != 0 {
		n += 2 + sovProduct(uint64(m.CreateTime))
	}
	return n
}

func sovProduct(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			m.MerchantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage", wireType)
			}
			m.Postage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Postage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsImages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsImages = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPrice", wireType)
			}
			m.MemberPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldCount", wireType)
			}
			m.SoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stock", wireType)
			}
			m.Stock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stock |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyMax", wireType)
			}
			m.BuyMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			m.Commission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commission |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integral", wireType)
			}
			m.Integral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Integral |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProduct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProduct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProduct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shopproto/product/product.proto", fileDescriptorProduct) }

var fileDescriptorProduct = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4b, 0x4e, 0xf3, 0x40,
	0x10, 0x84, 0xff, 0xf9, 0xf3, 0x9e, 0xf0, 0x08, 0x23, 0x84, 0x5a, 0x08, 0x19, 0x8b, 0x95, 0x57,
	0x61, 0xc1, 0x0d, 0x60, 0x95, 0x05, 0x52, 0x64, 0x71, 0x81, 0x89, 0xdd, 0x72, 0x2c, 0x6c, 0xb7,
	0x35, 0x33, 0x46, 0xe4, 0x26, 0x1c, 0x89, 0x25, 0x47, 0x40, 0xc9, 0x45, 0xd0, 0xb4, 0xf3, 0xf0,
	0xca, 0xae, 0xaf, 0xba, 0x4a, 0xad, 0x1e, 0x79, 0x6f, 0xd7, 0x54, 0xd7, 0x86, 0x1c, 0x3d, 0xd6,
	0x86, 0xd2, 0x26, 0x71, 0x87, 0xef, 0x9c, 0xa9, 0x52, 0x7e, 0x60, 0x6e, 0xcd, 0xc7, 0xfc, 0x38,
	0xf9, 0xb0, 0xeb, 0xc9, 0xd1, 0xb2, 0x9d, 0x52, 0x77, 0x72, 0xb2, 0x0f, 0x2c, 0x52, 0x10, 0xa1,
	0x88, 0x7a, 0xf1, 0x09, 0xa8, 0x40, 0xca, 0x12, 0x4d, 0xb2, 0xd6, 0x95, 0xb7, 0xff, 0xb3, 0xdd,
	0x21, 0x4a, 0xc9, 0x7e, 0x42, 0x29, 0x42, 0x2f, 0x14, 0xd1, 0x24, 0xe6, 0x7f, 0x9f, 0x49, 0xb4,
	0xc3, 0x8c, 0xcc, 0x66, 0x91, 0x42, 0x3f, 0x14, 0xd1, 0x20, 0xee, 0x10, 0x75, 0x2d, 0x07, 0x2e,
	0x77, 0x05, 0xc2, 0x80, 0x43, 0xad, 0xf0, 0x7b, 0x58, 0x2c, 0x8a, 0x25, 0xe5, 0x95, 0x83, 0x21,
	0x3b, 0x27, 0xa0, 0x40, 0x8e, 0x6a, 0xb2, 0x4e, 0x67, 0x08, 0x23, 0x2e, 0x3c, 0x48, 0x15, 0xca,
	0x69, 0x46, 0x94, 0xda, 0x45, 0xa9, 0x33, 0xb4, 0x30, 0xe6, 0x64, 0x17, 0xf9, 0x89, 0x12, 0xcb,
	0x15, 0x9a, 0xa5, 0xc9, 0x13, 0x84, 0x09, 0xe7, 0xbb, 0xc8, 0x6f, 0x54, 0xb3, 0x27, 0xd9, 0x6b,
	0x05, 0x6f, 0x44, 0x45, 0xfa, 0x42, 0x4d, 0xe5, 0x60, 0xca, 0xce, 0x09, 0xf8, 0x8c, 0x75, 0x94,
	0xbc, 0xc3, 0x59, 0x9b, 0x61, 0xa1, 0x6e, 0xe4, 0x70, 0xd5, 0x6c, 0x5e, 0xf5, 0x27, 0x9c, 0x33,
	0xde, 0x2b, 0xbe, 0x09, 0x95, 0x65, 0x6e, 0x6d, 0x4e, 0x15, 0x5c, 0xec, 0x6f, 0x72, 0x24, 0xea,
	0x56, 0x8e, 0xf3, 0xca, 0x61, 0x66, 0x74, 0x01, 0x97, 0xec, 0x1e, 0xb5, 0xef, 0xb4, 0x4e, 0xbb,
	0xc6, 0xc2, 0xac, 0xed, 0x6c, 0x15, 0x77, 0x1a, 0xd4, 0x0e, 0xdf, 0xf2, 0x12, 0xe1, 0x2a, 0x14,
	0x51, 0x3f, 0xee, 0x90, 0xe7, 0xd9, 0xf7, 0x36, 0x10, 0x3f, 0xdb, 0x40, 0xfc, 0x6e, 0x03, 0xf1,
	0xb5, 0x0b, 0xfe, 0xad, 0x86, 0xfc, 0xfc, 0x4f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x76,
	0x5a, 0x16, 0x35, 0x02, 0x00, 0x00,
}
