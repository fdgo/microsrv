// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/info.proto

package shop_srv_info

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	news "shop-micro/shopproto/news"
	video "shop-micro/shopproto/video"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type VideoDetailReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoDetailReq) Reset()         { *m = VideoDetailReq{} }
func (m *VideoDetailReq) String() string { return proto.CompactTextString(m) }
func (*VideoDetailReq) ProtoMessage()    {}
func (*VideoDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{1}
}
func (m *VideoDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoDetailReq.Merge(m, src)
}
func (m *VideoDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *VideoDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_VideoDetailReq proto.InternalMessageInfo

func (m *VideoDetailReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type InfoListReq struct {
	Category             string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	PageNum              int32    `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoListReq) Reset()         { *m = InfoListReq{} }
func (m *InfoListReq) String() string { return proto.CompactTextString(m) }
func (*InfoListReq) ProtoMessage()    {}
func (*InfoListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{2}
}
func (m *InfoListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoListReq.Merge(m, src)
}
func (m *InfoListReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoListReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoListReq proto.InternalMessageInfo

func (m *InfoListReq) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *InfoListReq) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *InfoListReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type VideoListResp struct {
	VideoList            []*video.Video `protobuf:"bytes,1,rep,name=videoList,proto3" json:"videoList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VideoListResp) Reset()         { *m = VideoListResp{} }
func (m *VideoListResp) String() string { return proto.CompactTextString(m) }
func (*VideoListResp) ProtoMessage()    {}
func (*VideoListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{3}
}
func (m *VideoListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoListResp.Merge(m, src)
}
func (m *VideoListResp) XXX_Size() int {
	return m.Size()
}
func (m *VideoListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoListResp.DiscardUnknown(m)
}

var xxx_messageInfo_VideoListResp proto.InternalMessageInfo

func (m *VideoListResp) GetVideoList() []*video.Video {
	if m != nil {
		return m.VideoList
	}
	return nil
}

type NewsListResp struct {
	NewsList             []*news.News `protobuf:"bytes,1,rep,name=newsList,proto3" json:"newsList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NewsListResp) Reset()         { *m = NewsListResp{} }
func (m *NewsListResp) String() string { return proto.CompactTextString(m) }
func (*NewsListResp) ProtoMessage()    {}
func (*NewsListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{4}
}
func (m *NewsListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewsListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewsListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewsListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsListResp.Merge(m, src)
}
func (m *NewsListResp) XXX_Size() int {
	return m.Size()
}
func (m *NewsListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsListResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewsListResp proto.InternalMessageInfo

func (m *NewsListResp) GetNewsList() []*news.News {
	if m != nil {
		return m.NewsList
	}
	return nil
}

type VideoCategorysResp struct {
	VideoCategoryList    []*video.VideoCategory `protobuf:"bytes,1,rep,name=VideoCategoryList,proto3" json:"VideoCategoryList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VideoCategorysResp) Reset()         { *m = VideoCategorysResp{} }
func (m *VideoCategorysResp) String() string { return proto.CompactTextString(m) }
func (*VideoCategorysResp) ProtoMessage()    {}
func (*VideoCategorysResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{5}
}
func (m *VideoCategorysResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoCategorysResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoCategorysResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoCategorysResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoCategorysResp.Merge(m, src)
}
func (m *VideoCategorysResp) XXX_Size() int {
	return m.Size()
}
func (m *VideoCategorysResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoCategorysResp.DiscardUnknown(m)
}

var xxx_messageInfo_VideoCategorysResp proto.InternalMessageInfo

func (m *VideoCategorysResp) GetVideoCategoryList() []*video.VideoCategory {
	if m != nil {
		return m.VideoCategoryList
	}
	return nil
}

type NewsCategorysResp struct {
	NewsCategoryList     []*news.NewsCategory `protobuf:"bytes,1,rep,name=newsCategoryList,proto3" json:"newsCategoryList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewsCategorysResp) Reset()         { *m = NewsCategorysResp{} }
func (m *NewsCategorysResp) String() string { return proto.CompactTextString(m) }
func (*NewsCategorysResp) ProtoMessage()    {}
func (*NewsCategorysResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_64fa072bf8191ee1, []int{6}
}
func (m *NewsCategorysResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewsCategorysResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewsCategorysResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewsCategorysResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsCategorysResp.Merge(m, src)
}
func (m *NewsCategorysResp) XXX_Size() int {
	return m.Size()
}
func (m *NewsCategorysResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsCategorysResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewsCategorysResp proto.InternalMessageInfo

func (m *NewsCategorysResp) GetNewsCategoryList() []*news.NewsCategory {
	if m != nil {
		return m.NewsCategoryList
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "shop.srv.info.request")
	proto.RegisterType((*VideoDetailReq)(nil), "shop.srv.info.VideoDetailReq")
	proto.RegisterType((*InfoListReq)(nil), "shop.srv.info.InfoListReq")
	proto.RegisterType((*VideoListResp)(nil), "shop.srv.info.VideoListResp")
	proto.RegisterType((*NewsListResp)(nil), "shop.srv.info.NewsListResp")
	proto.RegisterType((*VideoCategorysResp)(nil), "shop.srv.info.VideoCategorysResp")
	proto.RegisterType((*NewsCategorysResp)(nil), "shop.srv.info.NewsCategorysResp")
}

func init() { proto.RegisterFile("proto/info.proto", fileDescriptor_64fa072bf8191ee1) }

var fileDescriptor_64fa072bf8191ee1 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0x6e, 0xa9, 0x7a, 0x2f, 0x87, 0x0b, 0xc2, 0x98, 0x98, 0x5a, 0xb5, 0x29, 0x13, 0x63, 0xd8,
	0x58, 0x12, 0x34, 0x71, 0xaf, 0x24, 0xa0, 0x21, 0x35, 0xd6, 0xc4, 0xad, 0xa9, 0x30, 0xe0, 0x24,
	0xd2, 0x96, 0xce, 0x00, 0xd1, 0x77, 0x70, 0xef, 0x23, 0xb9, 0xf4, 0x11, 0x0c, 0xbe, 0x88, 0x99,
	0x69, 0x3b, 0x94, 0xfe, 0xc4, 0xcd, 0x64, 0xce, 0x39, 0xdf, 0xf7, 0x9d, 0x5f, 0xe8, 0xc7, 0x49,
	0xc4, 0xa3, 0x31, 0x0d, 0xd7, 0x91, 0x2b, 0xbf, 0xa8, 0xcb, 0xbe, 0x44, 0xb1, 0xcb, 0x92, 0x83,
	0x2b, 0x9c, 0xd6, 0x13, 0x61, 0x3e, 0xdb, 0xd2, 0x65, 0x12, 0x8d, 0xc5, 0x37, 0xc5, 0x87, 0xe4,
	0xc8, 0xe4, 0x93, 0x92, 0xac, 0xa7, 0xb5, 0xa8, 0x03, 0x5d, 0x91, 0xec, 0x4d, 0x71, 0xb8, 0x0d,
	0x57, 0x09, 0xd9, 0xed, 0x09, 0xe3, 0xd8, 0x81, 0xde, 0x47, 0x11, 0x99, 0x12, 0x1e, 0xd0, 0xaf,
	0x3e, 0xd9, 0xa1, 0x1e, 0xb4, 0xe8, 0xca, 0xd4, 0x1d, 0x7d, 0x64, 0xf8, 0x2d, 0xba, 0xc2, 0x9f,
	0xa0, 0xf3, 0x26, 0x5c, 0x47, 0x0b, 0xca, 0xb8, 0x08, 0x5b, 0x70, 0xbd, 0x0c, 0x38, 0xd9, 0x44,
	0xc9, 0x37, 0x09, 0x6a, 0xfb, 0xca, 0x46, 0x26, 0x5c, 0xc5, 0xc1, 0x86, 0x78, 0xfb, 0xad, 0xd9,
	0x72, 0xf4, 0xd1, 0x6d, 0x3f, 0x37, 0x05, 0x4b, 0x7c, 0x3f, 0xd0, 0xef, 0xc4, 0x34, 0x64, 0x48,
	0xd9, 0x78, 0x0e, 0x5d, 0x59, 0x42, 0x9a, 0x81, 0xc5, 0xe8, 0x25, 0xb4, 0x0f, 0xb9, 0xc3, 0xd4,
	0x1d, 0x63, 0xd4, 0x99, 0x3c, 0x70, 0xd5, 0x3c, 0x54, 0x63, 0xae, 0x64, 0xf9, 0x67, 0x2c, 0x9e,
	0xc2, 0x8d, 0x47, 0x8e, 0x4c, 0x09, 0xbd, 0x80, 0xeb, 0x30, 0xb3, 0x33, 0x1d, 0xb3, 0x4e, 0x47,
	0x70, 0x7c, 0x85, 0xc4, 0x04, 0x90, 0x54, 0x7e, 0x9d, 0xb5, 0xc5, 0xa4, 0xd6, 0x3b, 0x18, 0x5c,
	0x78, 0x0b, 0xa2, 0xc3, 0xc6, 0xe2, 0x72, 0xb0, 0x5f, 0xe5, 0xe2, 0x00, 0x06, 0x22, 0xf1, 0x65,
	0x96, 0x05, 0xf4, 0xc3, 0x82, 0xb3, 0x90, 0xc4, 0x69, 0xaa, 0x5c, 0xe5, 0xa8, 0x30, 0x27, 0x3f,
	0x0c, 0xb8, 0x25, 0x76, 0x87, 0x3c, 0xb8, 0x3b, 0x23, 0xbc, 0x18, 0x43, 0xf7, 0xdd, 0x8b, 0x0b,
	0x73, 0xb3, 0x83, 0xb0, 0x86, 0x25, 0x7f, 0x75, 0x14, 0x58, 0x43, 0x0b, 0xe8, 0xcd, 0x08, 0x2f,
	0x1c, 0x0e, 0x7a, 0x5c, 0x47, 0x53, 0x47, 0x65, 0x35, 0xef, 0x0f, 0x6b, 0xe8, 0x2d, 0xdc, 0xe4,
	0x6a, 0xb2, 0x34, 0xab, 0xa4, 0x55, 0x38, 0x3f, 0xeb, 0x51, 0x5d, 0x9e, 0x7c, 0xe1, 0x58, 0x43,
	0xef, 0xe1, 0xde, 0x8c, 0x70, 0xaf, 0x34, 0x89, 0xc6, 0x6e, 0x9d, 0x92, 0xbf, 0xb2, 0x11, 0xac,
	0xa1, 0x39, 0x74, 0x32, 0xc9, 0xff, 0x56, 0xf7, 0xb0, 0x46, 0xee, 0x5c, 0xdc, 0xab, 0xfe, 0xaf,
	0x93, 0xad, 0xff, 0x3e, 0xd9, 0xfa, 0x9f, 0x93, 0xad, 0xff, 0xfc, 0x6b, 0x6b, 0x9f, 0xef, 0xc8,
	0x49, 0x3c, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x32, 0x8e, 0x1e, 0xd6, 0x01, 0x04, 0x00, 0x00,
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *VideoDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintInfo(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNum != 0 {
		i = encodeVarintInfo(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintInfo(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VideoList) > 0 {
		for iNdEx := len(m.VideoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VideoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewsListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewsListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewsList) > 0 {
		for iNdEx := len(m.NewsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoCategorysResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoCategorysResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoCategorysResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VideoCategoryList) > 0 {
		for iNdEx := len(m.VideoCategoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VideoCategoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewsCategorysResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsCategorysResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewsCategorysResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewsCategoryList) > 0 {
		for iNdEx := len(m.NewsCategoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewsCategoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInfo(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovInfo(uint64(l))
	}
	if m.PageNum != 0 {
		n += 1 + sovInfo(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovInfo(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VideoList) > 0 {
		for _, e := range m.VideoList {
			l = e.Size()
			n += 1 + l + sovInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewsListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewsList) > 0 {
		for _, e := range m.NewsList {
			l = e.Size()
			n += 1 + l + sovInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoCategorysResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VideoCategoryList) > 0 {
		for _, e := range m.VideoCategoryList {
			l = e.Size()
			n += 1 + l + sovInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewsCategorysResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewsCategoryList) > 0 {
		for _, e := range m.NewsCategoryList {
			l = e.Size()
			n += 1 + l + sovInfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfo(x uint64) (n int) {
	return sovInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoList = append(m.VideoList, &video.Video{})
			if err := m.VideoList[len(m.VideoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsList = append(m.NewsList, &news.News{})
			if err := m.NewsList[len(m.NewsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoCategorysResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoCategorysResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoCategorysResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCategoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoCategoryList = append(m.VideoCategoryList, &video.VideoCategory{})
			if err := m.VideoCategoryList[len(m.VideoCategoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsCategorysResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsCategorysResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsCategorysResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsCategoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsCategoryList = append(m.NewsCategoryList, &news.NewsCategory{})
			if err := m.NewsCategoryList[len(m.NewsCategoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfo = fmt.Errorf("proto: unexpected end of group")
)
