// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/info.proto

/*
Package shop_srv_info is a generated protocol buffer package.

It is generated from these files:
	proto/info.proto

It has these top-level messages:
	Request
	VideoDetailReq
	InfoListReq
	VideoListResp
	NewsListResp
	VideoCategorysResp
	NewsCategorysResp
*/
package shop_srv_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "shop-micro/shopproto/news"
import shop_srv_shopproto1 "shop-micro/shopproto/video"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = shop_srv_shopproto1.Video{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Info service

type InfoService interface {
	GetCategoryList(ctx context.Context, in *Request, opts ...client.CallOption) (*VideoCategorysResp, error)
	GetVideoDetail(ctx context.Context, in *VideoDetailReq, opts ...client.CallOption) (*shop_srv_shopproto1.Video, error)
	GetVideoList(ctx context.Context, in *InfoListReq, opts ...client.CallOption) (*VideoListResp, error)
	GetNewsCategoryList(ctx context.Context, in *Request, opts ...client.CallOption) (*NewsCategorysResp, error)
	GetNewsList(ctx context.Context, in *InfoListReq, opts ...client.CallOption) (*NewsListResp, error)
}

type infoService struct {
	c    client.Client
	name string
}

func NewInfoService(name string, c client.Client) InfoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shop.srv.info"
	}
	return &infoService{
		c:    c,
		name: name,
	}
}

func (c *infoService) GetCategoryList(ctx context.Context, in *Request, opts ...client.CallOption) (*VideoCategorysResp, error) {
	req := c.c.NewRequest(c.name, "Info.GetCategoryList", in)
	out := new(VideoCategorysResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoService) GetVideoDetail(ctx context.Context, in *VideoDetailReq, opts ...client.CallOption) (*shop_srv_shopproto1.Video, error) {
	req := c.c.NewRequest(c.name, "Info.GetVideoDetail", in)
	out := new(shop_srv_shopproto1.Video)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoService) GetVideoList(ctx context.Context, in *InfoListReq, opts ...client.CallOption) (*VideoListResp, error) {
	req := c.c.NewRequest(c.name, "Info.GetVideoList", in)
	out := new(VideoListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoService) GetNewsCategoryList(ctx context.Context, in *Request, opts ...client.CallOption) (*NewsCategorysResp, error) {
	req := c.c.NewRequest(c.name, "Info.GetNewsCategoryList", in)
	out := new(NewsCategorysResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoService) GetNewsList(ctx context.Context, in *InfoListReq, opts ...client.CallOption) (*NewsListResp, error) {
	req := c.c.NewRequest(c.name, "Info.GetNewsList", in)
	out := new(NewsListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Info service

type InfoHandler interface {
	GetCategoryList(context.Context, *Request, *VideoCategorysResp) error
	GetVideoDetail(context.Context, *VideoDetailReq, *shop_srv_shopproto1.Video) error
	GetVideoList(context.Context, *InfoListReq, *VideoListResp) error
	GetNewsCategoryList(context.Context, *Request, *NewsCategorysResp) error
	GetNewsList(context.Context, *InfoListReq, *NewsListResp) error
}

func RegisterInfoHandler(s server.Server, hdlr InfoHandler, opts ...server.HandlerOption) error {
	type info interface {
		GetCategoryList(ctx context.Context, in *Request, out *VideoCategorysResp) error
		GetVideoDetail(ctx context.Context, in *VideoDetailReq, out *shop_srv_shopproto1.Video) error
		GetVideoList(ctx context.Context, in *InfoListReq, out *VideoListResp) error
		GetNewsCategoryList(ctx context.Context, in *Request, out *NewsCategorysResp) error
		GetNewsList(ctx context.Context, in *InfoListReq, out *NewsListResp) error
	}
	type Info struct {
		info
	}
	h := &infoHandler{hdlr}
	return s.Handle(s.NewHandler(&Info{h}, opts...))
}

type infoHandler struct {
	InfoHandler
}

func (h *infoHandler) GetCategoryList(ctx context.Context, in *Request, out *VideoCategorysResp) error {
	return h.InfoHandler.GetCategoryList(ctx, in, out)
}

func (h *infoHandler) GetVideoDetail(ctx context.Context, in *VideoDetailReq, out *shop_srv_shopproto1.Video) error {
	return h.InfoHandler.GetVideoDetail(ctx, in, out)
}

func (h *infoHandler) GetVideoList(ctx context.Context, in *InfoListReq, out *VideoListResp) error {
	return h.InfoHandler.GetVideoList(ctx, in, out)
}

func (h *infoHandler) GetNewsCategoryList(ctx context.Context, in *Request, out *NewsCategorysResp) error {
	return h.InfoHandler.GetNewsCategoryList(ctx, in, out)
}

func (h *infoHandler) GetNewsList(ctx context.Context, in *InfoListReq, out *NewsListResp) error {
	return h.InfoHandler.GetNewsList(ctx, in, out)
}
