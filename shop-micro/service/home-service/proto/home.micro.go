// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/home.proto

/*
Package shop_srv_home is a generated protocol buffer package.

It is generated from these files:
	proto/home.proto

It has these top-level messages:
	HomeHeaderReq
	HomeNav
	HomeCourse
	HomeHeadersResp
	HomeContentsReq
	HomeContentsResp
*/
package shop_srv_home

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "shop-micro/shopproto/news"
import _ "shop-micro/shopproto/product"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HomeService service

type HomeService interface {
	FindHomeHeaders(ctx context.Context, in *HomeHeaderReq, opts ...client.CallOption) (*HomeHeadersResp, error)
	FindHomeContents(ctx context.Context, in *HomeContentsReq, opts ...client.CallOption) (*HomeContentsResp, error)
}

type homeService struct {
	c    client.Client
	name string
}

func NewHomeService(name string, c client.Client) HomeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shop.srv.home"
	}
	return &homeService{
		c:    c,
		name: name,
	}
}

func (c *homeService) FindHomeHeaders(ctx context.Context, in *HomeHeaderReq, opts ...client.CallOption) (*HomeHeadersResp, error) {
	req := c.c.NewRequest(c.name, "HomeService.FindHomeHeaders", in)
	out := new(HomeHeadersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeService) FindHomeContents(ctx context.Context, in *HomeContentsReq, opts ...client.CallOption) (*HomeContentsResp, error) {
	req := c.c.NewRequest(c.name, "HomeService.FindHomeContents", in)
	out := new(HomeContentsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HomeService service

type HomeServiceHandler interface {
	FindHomeHeaders(context.Context, *HomeHeaderReq, *HomeHeadersResp) error
	FindHomeContents(context.Context, *HomeContentsReq, *HomeContentsResp) error
}

func RegisterHomeServiceHandler(s server.Server, hdlr HomeServiceHandler, opts ...server.HandlerOption) error {
	type homeService interface {
		FindHomeHeaders(ctx context.Context, in *HomeHeaderReq, out *HomeHeadersResp) error
		FindHomeContents(ctx context.Context, in *HomeContentsReq, out *HomeContentsResp) error
	}
	type HomeService struct {
		homeService
	}
	h := &homeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HomeService{h}, opts...))
}

type homeServiceHandler struct {
	HomeServiceHandler
}

func (h *homeServiceHandler) FindHomeHeaders(ctx context.Context, in *HomeHeaderReq, out *HomeHeadersResp) error {
	return h.HomeServiceHandler.FindHomeHeaders(ctx, in, out)
}

func (h *homeServiceHandler) FindHomeContents(ctx context.Context, in *HomeContentsReq, out *HomeContentsResp) error {
	return h.HomeServiceHandler.FindHomeContents(ctx, in, out)
}
